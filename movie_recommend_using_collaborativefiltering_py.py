# -*- coding: utf-8 -*-
"""Movie_Recommend_Using_CollaborativeFiltering.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ZxWLI_xQZApweTQfCWWtYuLaGI0GJfs
"""

import pandas as pd
import numpy as np
from google.colab import files

"""### **Loading data from CSV files**"""

uploaded=files.upload()

df=pd.read_csv("Recommendation System.csv")
movie=df

uploaded=files.upload()

title=pd.read_csv("Movie_Id_Titles.csv")

movie

title

"""### **Merging Two Datasets**"""

df = pd.merge(movie,title,on='item_id',how='inner')
df.sort_values('item_id').head()
df

df.groupby("title")['rating'].mean().sort_values(ascending=False)
df.groupby("title")['rating'].count().sort_values(ascending=False)#.head()
ratings = pd.DataFrame(df.groupby("title")['rating'].mean())
ratings.head()

#movie=movie.drop(['title_x','title_y'], axis = 1)

df

"""## **Taking care of missing data**"""

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy='mean') 
imputer=imputer.fit(df.iloc[:,:-1].values)
df.iloc[:,:-1]=imputer.transform(df.iloc[:,:-1])

df

"""### **Data Exploration**"""

df.info()

title.info()

"""**value.counts() method**"""

df["rating"].value_counts()

df["user_id"].value_counts()

"""## **Data Visualization**"""

import matplotlib.pyplot as plt
df.hist(bins=50, figsize=(20,15))
plt.show()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('dark')
# %matplotlib inline

plt.figure(figsize=(8,6))
plt.rcParams['patch.force_edgecolor'] = True
ratings['rating_counts'].hist(bins=50)
plt.title('Number of Ratings')
plt.xlabel('Rating counts')
plt.ylabel('Movie Counts')
plt.show()

plt.figure(figsize=(8,6))
plt.rcParams['patch.force_edgecolor'] = True
sns.jointplot(x='rating', y='rating_counts', data=ratings, alpha=0.4)



"""## **Using ML**"""

ratings["rating_counts"]= pd.DataFrame(df.groupby("title")['rating'].count())
ratings.head()



def get_top_rated(df, thr=80, n=10):
    df1=df.groupby("title").rating.mean()
    df2=pd.DataFrame(df1)
    df2["no"]=df.groupby("title").rating.count()
    df3=df2[df2["no"]>thr]
    maxno=df3["no"].max()
    df3["rating"]+=df3["no"]/maxno-0.5
    return df3.sort_values(["rating"],ascending=[0]).head(n)
get_top_rated(df)

"""def get_top_rated(df,thr=80,no=10):
  df2=df.groupby("title").rating.mean()
  df3=pd.DataFrame(df2)
  df3["no"]= df.groupby("title").rating.count()
  df4=df3[df3["no"]>thr]
  return df4.sort_values(["rating"],ascending=False).head(no)
get_top_rated(df,80,10)

### **Correlation**
"""

movie_matrix=df.pivot_table(index='user_id',columns='title',values='rating').fillna(0)  #sparse matrix
movie_matrix.sample(5)

movie_matrix.shape

def get_similar(movie_matrix,movie_name,thr=40,n=10):
    sw_user_rating=movie_matrix[movie_name]
    similar_to_sw=movie_matrix.corrwith(sw_user_rating)
    similar_to_sw.sample(10)
    corr_sw=pd.DataFrame(similar_to_sw,columns=["correlation"])
    corr_sw.dropna(inplace=True) #we need to drope those those values where there is no correlation 
    movietemp=df.groupby("title").rating.count()
    movietemp=pd.DataFrame(movietemp)
    corr_sw=corr_sw.merge(movietemp,on="title")
    corr_sw=corr_sw[corr_sw["rating"]>thr]
    return corr_sw.sort_values(by='correlation',ascending=False).head(n)
get_similar(movie_matrix,'Star Wars (1977)')

def get_sim_users_reviews(df,movie_matrix,uid, thr=20):
  #movie_matrix.head()
  
  sw_user_rating=movie_matrix.loc[uid]
  #return sw_user_rating
  #return sw_user_rating
  similar_to_sw=movie_matrix.corrwith(sw_user_rating,axis=1)
  #return similar_to_sw
  corr_sw=pd.DataFrame(similar_to_sw,columns=['correlation'])
  corr_sw.dropna(inplace=True)
  #return corr_sw.shape

  coUsers = df.groupby("user_id").rating.count()
  coUsers = pd.DataFrame(coUsers)
  coUsers.columns=["no"]
  #return coUsers.head()


  corr_sw = corr_sw.join(coUsers["no"])
  #return corr_sw.head()
  corr_sw = corr_sw[corr_sw['no']>thr]
  corr_sw = corr_sw.sort_values(by='correlation',ascending=False)
  corr_sw = corr_sw[corr_sw['correlation']>0.4]
  corr_sw = corr_sw.sort_values(by='correlation',ascending=False)
  #return corr_sw

  #return corr_sw.shape 
  uids=corr_sw.index     #index is userids
  newdf=df[df.user_id.isin(uids)]
  #return newdf.head(10)
  #return newdf.shape
  return newdf
  
def get_sim_users_top_rated(df,movie_matrix,uid, thr=20):
  newdf=get_sim_users_reviews(df,movie_matrix,uid,thr=20)
  return get_top_rated(newdf,10,10)
  #return get_curated(newdf,10,10)

#get_sim_users_reviews(df,movie_matrix,1)
#df
get_sim_users_top_rated(df,movie_matrix,2)
#get_sim_users_top_rated(df,movie_matrix,1)